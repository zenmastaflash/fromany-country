// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum DocumentType {
  PASSPORT
  VISA
  TOURIST_VISA
  TAX_RETURN
  DRIVERS_LICENSE
  RESIDENCY_PERMIT
  BANK_STATEMENT
  INSURANCE
  OTHER
}

enum ResidencyStatus {
  PERMANENT_RESIDENT
  TEMPORARY_RESIDENT
  NON_RESIDENT
  TAX_RESIDENT
  DIGITAL_NOMAD
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  name                    String?
  emailVerified          DateTime?
  image                   String?
  displayName             String?
  timezone                String?
  preferences             Json?     
  visibility              String?   @default("private")
  bio                     String?   @default("")
  location                String?
  socialLinks             String[]  @default([])
  notificationPreferences Json?     @default("{ \"documentExpiry\": true, \"travelReminders\": true, \"securityAlerts\": true, \"newsletter\": false }")
  primaryCurrency         String?   @default("USD")
  taxResidency           String?
  emergencyContact       Json?
  preferredLanguage      String?   @default("en")
  terms_accepted_at      DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  documents              Document[]
  accounts               Account[]
  sessions               Session[]
  user_tax_status        user_tax_status[]
  trip_scenarios         TripScenarios[]
  travel                Travel[]
}

model Document {
  id             String       @id @default(cuid())
  userId         String
  type           DocumentType @default(OTHER)
  status         String       @default("active")
  title          String?
  number         String?
  issueDate      DateTime?
  expiryDate     DateTime?
  issuingCountry String?
  fileName       String?
  fileUrl        String?
  metadata       Json?
  tags           String[]     @default([])
  sharedWith     String[]     @default([])
  version        Int          @default(1)
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model country_tax_rules {
  id                 String    @id @default(cuid())
  country_code       String    @unique
  name              String
  tax_year_start    String    // MM-DD format
  day_counting_method String
  residency_threshold Int
  special_rules     Json?
  tax_treaties      Json?
  version           Int       @default(1)
  effective_from    DateTime
  effective_to      DateTime?
  last_verified_date DateTime?
  source_url        String?
  source_type       String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  user_tax_status   user_tax_status[]
}

model user_tax_status {
  id                  String    @id @default(cuid())
  user_id            String
  country_code       String
  tax_year           Int
  days_present       Int       @default(0)
  last_calculated_at DateTime?  @db.Timestamptz
  tax_liability_risk String?
  created_at         DateTime  @default(now()) @db.Timestamptz
  updated_at         DateTime  @updatedAt @db.Timestamptz
  document_id        String?
  residency_start_date DateTime? @db.Timestamptz
  required_presence   Int?
  residency_status   ResidencyStatus?
  compliance_notes   String?
  alerts_sent        Json?     @db.JsonB
  user               User      @relation(fields: [user_id], references: [id])
  country            country_tax_rules @relation(fields: [country_code], references: [country_code])

  @@unique([user_id, country_code, tax_year])
}

model TripScenarios {
  id                String    @id @default(cuid())
  user_id          String
  name             String
  start_date       DateTime
  end_date         DateTime
  countries        Json      // Array of countries with durations
  tax_implications Json?
  visa_requirements Json?
  total_cost_estimate Decimal?
  currency         String    @default("USD")
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  user             User      @relation(fields: [user_id], references: [id])
}

model Travel {
  id          String    @id @default(cuid())
  user_id     String
  country     String
  city        String?
  entry_date  DateTime
  exit_date   DateTime?
  purpose     String
  visa_type   String?
  notes       String?
  status      String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id])
}
